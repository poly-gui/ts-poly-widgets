// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter } from "nanopack"

import { Widget } from "../widget/widget.np.js"

class Column extends Widget {
	public static TYPE_ID = 103

	constructor(
		tag: number | null,
		public children: Widget[],
	) {
		super(tag)
	}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: Column } | null {
		const reader = new NanoBufReader(bytes)
		return Column.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: Column } | null {
		let ptr = 12

		let tag: number | null
		if (reader.readFieldSize(0) < 0) {
			tag = null
		} else {
			tag = reader.readInt32(ptr)
			ptr += 4
		}

		const childrenLength = reader.readInt32(ptr)
		ptr += 4
		const children: Widget[] = new Array(childrenLength)
		for (let i = 0; i < childrenLength; i++) {
			const maybe_iItem = Widget.fromReader(reader.newReaderAt(ptr))
			if (!maybe_iItem) {
				return null
			}
			const iItem = maybe_iItem.result
			ptr += maybe_iItem.bytesRead

			children[i] = iItem
		}
		return { bytesRead: ptr, result: new Column(tag, children) }
	}

	public override get typeId(): number {
		return 103
	}

	public override bytes(): Uint8Array {
		const writer = new NanoBufWriter(12)
		writer.writeTypeId(103)

		if (this.tag) {
			writer.appendInt32(this.tag)
			writer.writeFieldSize(0, 4)
		} else {
			writer.writeFieldSize(0, -1)
		}

		let childrenByteLength = 4
		writer.appendInt32(this.children.length)
		for (const item0 of this.children) {
			const item0Data = item0.bytes()
			writer.appendBytes(item0Data)
			childrenByteLength += item0Data.byteLength
		}
		writer.writeFieldSize(1, childrenByteLength)

		return writer.bytes
	}

	public override bytesWithLengthPrefix(): Uint8Array {
		const writer = new NanoBufWriter(16, true)
		writer.writeTypeId(103)

		if (this.tag) {
			writer.appendInt32(this.tag)
			writer.writeFieldSize(0, 4)
		} else {
			writer.writeFieldSize(0, -1)
		}

		let childrenByteLength = 4
		writer.appendInt32(this.children.length)
		for (const item0 of this.children) {
			const item0Data = item0.bytes()
			writer.appendBytes(item0Data)
			childrenByteLength += item0Data.byteLength
		}
		writer.writeFieldSize(1, childrenByteLength)

		writer.writeLengthPrefix(writer.currentSize - 4)

		return writer.bytes
	}
}

export { Column }
