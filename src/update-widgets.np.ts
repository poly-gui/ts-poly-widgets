// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack"

import { UpdateWidget } from "./update-widget.np.js"

class UpdateWidgets implements NanoPackMessage {
	public static TYPE_ID = 624966581

	public readonly typeId: number = 624966581

	public readonly headerSize: number = 8

	constructor(public updates: UpdateWidget[]) {}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: UpdateWidgets } | null {
		const reader = new NanoBufReader(bytes)
		return UpdateWidgets.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: UpdateWidgets } | null {
		let ptr = 8

		const updatesLength = reader.readInt32(ptr)
		ptr += 4
		const updates: UpdateWidget[] = new Array(updatesLength)
		for (let i = 0; i < updatesLength; i++) {
			const maybeIItem = UpdateWidget.fromReader(reader.newReaderAt(ptr))
			if (!maybeIItem) {
				return null
			}
			const iItem = maybeIItem.result
			ptr += maybeIItem.bytesRead
			updates[i] = iItem
		}

		return { bytesRead: ptr, result: new UpdateWidgets(updates) }
	}

	public writeTo(writer: NanoBufWriter, offset: number = 0): number {
		let bytesWritten = 8

		writer.writeTypeId(624966581, offset)

		writer.appendInt32(this.updates.length)
		let updatesByteLength = 4
		for (const iItem of this.updates) {
			const iItemData = iItem.bytes()
			writer.appendBytes(iItemData)
			updatesByteLength += iItemData.byteLength
		}
		writer.writeFieldSize(0, updatesByteLength, offset)
		bytesWritten += updatesByteLength

		return bytesWritten
	}

	public bytes(): Uint8Array {
		const writer = new NanoBufWriter(8)
		this.writeTo(writer)
		return writer.bytes
	}
}

export { UpdateWidgets }
