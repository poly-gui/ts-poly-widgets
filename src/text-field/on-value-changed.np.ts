// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack"

class OnValueChanged implements NanoPackMessage {
	public static TYPE_ID = 1768749598

	constructor(public newValue: string) {}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: OnValueChanged } | null {
		const reader = new NanoBufReader(bytes)
		return OnValueChanged.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: OnValueChanged } | null {
		let ptr = 8

		const newValueByteLength = reader.readFieldSize(0)
		const newValue = reader.readString(ptr, newValueByteLength)
		ptr += newValueByteLength

		return { bytesRead: ptr, result: new OnValueChanged(newValue) }
	}

	public get typeId(): number {
		return 1768749598
	}

	public bytes(): Uint8Array {
		const writer = new NanoBufWriter(8)
		writer.writeTypeId(1768749598)

		const newValueByteLength = writer.appendString(this.newValue)
		writer.writeFieldSize(0, newValueByteLength)

		return writer.bytes
	}

	public bytesWithLengthPrefix(): Uint8Array {
		const writer = new NanoBufWriter(8 + 4, true)
		writer.writeTypeId(1768749598)

		const newValueByteLength = writer.appendString(this.newValue)
		writer.writeFieldSize(0, newValueByteLength)

		writer.writeLengthPrefix(writer.currentSize - 4)

		return writer.bytes
	}
}

export { OnValueChanged }
