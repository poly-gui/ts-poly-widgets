// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter } from "nanopack"

import { Widget } from "../widget/widget.np.js"

class TextField extends Widget {
	public static TYPE_ID = 841129444

	public override readonly typeId: number = 841129444

	public override readonly headerSize: number = 20

	constructor(
		public tag: number | null,
		public placeholder: string | null,
		public value: string,
		public onValueChanged: number,
	) {
		super(tag)
	}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: TextField } | null {
		const reader = new NanoBufReader(bytes)
		return TextField.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: TextField } | null {
		let ptr = 20

		let tag: number | null
		if (reader.readFieldSize(0) >= 0) {
			tag = reader.readInt32(ptr)
			ptr += 4
		} else {
			tag = null
		}

		let placeholder: string | null
		if (reader.readFieldSize(1) >= 0) {
			const placeholderByteLength = reader.readFieldSize(1)
			placeholder = reader.readString(ptr, placeholderByteLength)
			ptr += placeholderByteLength
		} else {
			placeholder = null
		}

		const valueByteLength = reader.readFieldSize(2)
		const value = reader.readString(ptr, valueByteLength)
		ptr += valueByteLength

		const onValueChanged = reader.readInt32(ptr)
		ptr += 4

		return {
			bytesRead: ptr,
			result: new TextField(tag, placeholder, value, onValueChanged),
		}
	}

	public override writeTo(writer: NanoBufWriter, offset: number = 0): number {
		const writerSizeBefore = writer.currentSize

		writer.writeTypeId(841129444, offset)

		if (this.tag) {
			writer.appendInt32(this.tag)
			writer.writeFieldSize(0, 4, offset)
		} else {
			writer.writeFieldSize(0, -1, offset)
		}

		if (this.placeholder) {
			const placeholderByteLength = writer.appendString(this.placeholder)
			writer.writeFieldSize(1, placeholderByteLength, offset)
		} else {
			writer.writeFieldSize(1, -1, offset)
		}

		const valueByteLength = writer.appendString(this.value)
		writer.writeFieldSize(2, valueByteLength, offset)

		writer.appendInt32(this.onValueChanged)
		writer.writeFieldSize(3, 4, offset)

		return writer.currentSize - writerSizeBefore
	}

	public override bytes(): Uint8Array {
		const writer = new NanoBufWriter(20)
		this.writeTo(writer)
		return writer.bytes
	}
}

export { TextField }
