// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter } from "nanopack"

import { Widget } from "../widget/widget.np.js"

class Text extends Widget {
	public static TYPE_ID = 101

	constructor(
		tag: number | null,
		public content: string,
	) {
		super(tag)
	}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: Text } | null {
		const reader = new NanoBufReader(bytes)
		return Text.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: Text } | null {
		let ptr = 12

		let tag: number | null
		if (reader.readFieldSize(0) < 0) {
			tag = null
		} else {
			tag = reader.readInt32(ptr)
			ptr += 4
		}

		const contentByteLength = reader.readFieldSize(1)
		const content = reader.readString(ptr, contentByteLength)
		ptr += contentByteLength

		return { bytesRead: ptr, result: new Text(tag, content) }
	}

	public override get typeId(): number {
		return 101
	}

	public override bytes(): Uint8Array {
		const writer = new NanoBufWriter(12)
		writer.writeTypeId(101)

		if (this.tag) {
			writer.appendInt32(this.tag)
			writer.writeFieldSize(0, 4)
		} else {
			writer.writeFieldSize(0, -1)
		}

		const contentByteLength = writer.appendString(this.content)
		writer.writeFieldSize(1, contentByteLength)

		return writer.bytes
	}

	public override bytesWithLengthPrefix(): Uint8Array {
		const writer = new NanoBufWriter(16, true)
		writer.writeTypeId(101)

		if (this.tag) {
			writer.appendInt32(this.tag)
			writer.writeFieldSize(0, 4)
		} else {
			writer.writeFieldSize(0, -1)
		}

		const contentByteLength = writer.appendString(this.content)
		writer.writeFieldSize(1, contentByteLength)

		writer.writeLengthPrefix(writer.currentSize - 4)

		return writer.bytes
	}
}

export { Text }
