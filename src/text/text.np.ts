// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter } from "nanopack"

import { Widget } from "../widget/widget.np.js"
import { FontStyle } from "../style/font-style.np.js"

class Text extends Widget {
	public static TYPE_ID = 3495336243

	public override readonly typeId: number = 3495336243

	public override readonly headerSize: number = 16

	constructor(
		public tag: number | null,
		public content: string,
		public style: FontStyle,
	) {
		super(tag)
	}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: Text } | null {
		const reader = new NanoBufReader(bytes)
		return Text.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: Text } | null {
		let ptr = 16

		let tag: number | null
		if (reader.readFieldSize(0) >= 0) {
			tag = reader.readInt32(ptr)
			ptr += 4
		} else {
			tag = null
		}

		const contentByteLength = reader.readFieldSize(1)
		const content = reader.readString(ptr, contentByteLength)
		ptr += contentByteLength

		const maybeStyle = FontStyle.fromReader(reader.newReaderAt(ptr))
		if (!maybeStyle) {
			return null
		}
		const style = maybeStyle.result
		ptr += maybeStyle.bytesRead

		return { bytesRead: ptr, result: new Text(tag, content, style) }
	}

	public override writeTo(writer: NanoBufWriter, offset: number = 0): number {
		let bytesWritten = 16

		writer.writeTypeId(3495336243, offset)

		if (this.tag) {
			writer.appendInt32(this.tag)
			writer.writeFieldSize(0, 4, offset)
			bytesWritten += 4
		} else {
			writer.writeFieldSize(0, -1, offset)
		}

		const contentByteLength = writer.appendString(this.content)
		writer.writeFieldSize(1, contentByteLength, offset)
		bytesWritten += contentByteLength

		const styleData = this.style.bytes()
		writer.appendBytes(styleData)
		writer.writeFieldSize(2, styleData.byteLength, offset)
		bytesWritten += styleData.byteLength

		return bytesWritten
	}

	public override bytes(): Uint8Array {
		const writer = new NanoBufWriter(16)
		this.writeTo(writer)
		return writer.bytes
	}
}

export { Text }
