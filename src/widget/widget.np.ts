// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack"

import { Text } from "../text/text.np.js"

class Widget implements NanoPackMessage {
	public static TYPE_ID = 100

	constructor(public tag: number | null) {}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: Widget } | null {
		const reader = new NanoBufReader(bytes)
		switch (reader.readTypeId()) {
			case 100:
				break
			case 101:
				return Text.fromBytes(bytes)
			default:
				return null
		}

		let ptr = 8

		let tag: number | null
		if (reader.readFieldSize(0) < 0) {
			tag = null
		} else {
			tag = reader.readInt32(ptr)
			ptr += 4
		}

		return { bytesRead: ptr, result: new Widget(tag) }
	}

	public get typeId(): number {
		return 100
	}

	public bytes(): Uint8Array {
		const writer = new NanoBufWriter(8)
		writer.writeTypeId(100)

		if (this.tag) {
			writer.appendInt32(this.tag)
			writer.writeFieldSize(0, 4)
		} else {
			writer.writeFieldSize(0, -1)
		}

		return writer.bytes
	}

	public bytesWithLengthPrefix(): Uint8Array {
		const writer = new NanoBufWriter(12, true)
		writer.writeTypeId(100)

		if (this.tag) {
			writer.appendInt32(this.tag)
			writer.writeFieldSize(0, 4)
		} else {
			writer.writeFieldSize(0, -1)
		}

		writer.writeLengthPrefix(writer.currentSize - 4)

		return writer.bytes
	}
}

export { Widget }
