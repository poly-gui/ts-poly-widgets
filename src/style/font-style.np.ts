// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack"

class FontStyle implements NanoPackMessage {
	public static TYPE_ID = 3635009167

	public readonly typeId: number = 3635009167

	public readonly headerSize: number = 16

	constructor(
		public fontFamily: string,
		public fontWeight: number,
		public fontSize: number,
	) {}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: FontStyle } | null {
		const reader = new NanoBufReader(bytes)
		return FontStyle.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: FontStyle } | null {
		let ptr = 16

		const fontFamilyByteLength = reader.readFieldSize(0)
		const fontFamily = reader.readString(ptr, fontFamilyByteLength)
		ptr += fontFamilyByteLength

		const fontWeight = reader.readUint32(ptr)
		ptr += 4

		const fontSize = reader.readUint32(ptr)
		ptr += 4

		return {
			bytesRead: ptr,
			result: new FontStyle(fontFamily, fontWeight, fontSize),
		}
	}

	public writeTo(writer: NanoBufWriter, offset: number = 0): number {
		let bytesWritten = 16

		writer.writeTypeId(3635009167, offset)

		const fontFamilyByteLength = writer.appendString(this.fontFamily)
		writer.writeFieldSize(0, fontFamilyByteLength, offset)
		bytesWritten += fontFamilyByteLength

		writer.appendUint32(this.fontWeight)
		writer.writeFieldSize(1, 4, offset)
		bytesWritten += 4

		writer.appendUint32(this.fontSize)
		writer.writeFieldSize(2, 4, offset)
		bytesWritten += 4

		return bytesWritten
	}

	public bytes(): Uint8Array {
		const writer = new NanoBufWriter(16)
		this.writeTo(writer)
		return writer.bytes
	}
}

export { FontStyle }
