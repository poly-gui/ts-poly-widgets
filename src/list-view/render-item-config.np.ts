// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack"

class RenderItemConfig implements NanoPackMessage {
	public static TYPE_ID = 3591753548

	constructor(
		public sectionIndex: number,
		public itemIndex: number,
		public itemTag: number | null,
	) {}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: RenderItemConfig } | null {
		const reader = new NanoBufReader(bytes)
		return RenderItemConfig.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: RenderItemConfig } | null {
		let ptr = 16

		const sectionIndex = reader.readInt32(ptr)
		ptr += 4

		const itemIndex = reader.readInt32(ptr)
		ptr += 4

		let itemTag: number | null
		if (reader.readFieldSize(2) >= 0) {
			itemTag = reader.readInt32(ptr)
			ptr += 4
		} else {
			itemTag = null
		}

		return {
			bytesRead: ptr,
			result: new RenderItemConfig(sectionIndex, itemIndex, itemTag),
		}
	}

	public get typeId(): number {
		return 3591753548
	}

	public bytes(): Uint8Array {
		const writer = new NanoBufWriter(16)
		writer.writeTypeId(3591753548)

		writer.appendInt32(this.sectionIndex)
		writer.writeFieldSize(0, 4)

		writer.appendInt32(this.itemIndex)
		writer.writeFieldSize(1, 4)

		if (this.itemTag) {
			writer.appendInt32(this.itemTag)
			writer.writeFieldSize(2, 4)
		} else {
			writer.writeFieldSize(2, -1)
		}

		return writer.bytes
	}

	public bytesWithLengthPrefix(): Uint8Array {
		const writer = new NanoBufWriter(16 + 4, true)
		writer.writeTypeId(3591753548)

		writer.appendInt32(this.sectionIndex)
		writer.writeFieldSize(0, 4)

		writer.appendInt32(this.itemIndex)
		writer.writeFieldSize(1, 4)

		if (this.itemTag) {
			writer.appendInt32(this.itemTag)
			writer.writeFieldSize(2, 4)
		} else {
			writer.writeFieldSize(2, -1)
		}

		writer.writeLengthPrefix(writer.currentSize - 4)

		return writer.bytes
	}
}

export { RenderItemConfig }
