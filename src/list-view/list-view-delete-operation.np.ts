// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter } from "nanopack"

import { ListViewOperation } from "./list-view-operation.np.js"

class ListViewDeleteOperation extends ListViewOperation {
	public static TYPE_ID = 2223513129

	constructor(
		public tag: number,
		public deleteAt: number[],
	) {
		super(tag)
	}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: ListViewDeleteOperation } | null {
		const reader = new NanoBufReader(bytes)
		return ListViewDeleteOperation.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: ListViewDeleteOperation } | null {
		let ptr = 12

		const tag = reader.readInt32(ptr)
		ptr += 4

		const deleteAtByteLength = reader.readFieldSize(1)
		const deleteAtLength = deleteAtByteLength / 4
		const deleteAt: number[] = new Array(deleteAtLength)
		for (let i = 0; i < deleteAtLength; i++) {
			const iItem = reader.readInt32(ptr)
			ptr += 4
			deleteAt[i] = iItem
		}

		return {
			bytesRead: ptr,
			result: new ListViewDeleteOperation(tag, deleteAt),
		}
	}

	public override get typeId(): number {
		return 2223513129
	}

	public override bytes(): Uint8Array {
		const writer = new NanoBufWriter(12)
		writer.writeTypeId(2223513129)

		writer.appendInt32(this.tag)
		writer.writeFieldSize(0, 4)

		writer.writeFieldSize(1, this.deleteAt.length * 4)
		for (const deleteAt of this.deleteAt) {
			writer.appendInt32(deleteAt)
		}

		return writer.bytes
	}

	public override bytesWithLengthPrefix(): Uint8Array {
		const writer = new NanoBufWriter(12 + 4, true)
		writer.writeTypeId(2223513129)

		writer.appendInt32(this.tag)
		writer.writeFieldSize(0, 4)

		writer.writeFieldSize(1, this.deleteAt.length * 4)
		for (const deleteAt of this.deleteAt) {
			writer.appendInt32(deleteAt)
		}

		writer.writeLengthPrefix(writer.currentSize - 4)

		return writer.bytes
	}
}

export { ListViewDeleteOperation }
