// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter } from "nanopack"

import { ListViewOperation } from "./list-view-operation.np.js"

class ListViewInsertOperation extends ListViewOperation {
	public static TYPE_ID = 2077451345

	public override readonly typeId: number = 2077451345

	public override readonly headerSize: number = 12

	constructor(
		public tag: number,
		public insertAt: number[],
	) {
		super(tag)
	}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: ListViewInsertOperation } | null {
		const reader = new NanoBufReader(bytes)
		return ListViewInsertOperation.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: ListViewInsertOperation } | null {
		let ptr = 12

		const tag = reader.readInt32(ptr)
		ptr += 4

		const insertAtByteLength = reader.readFieldSize(1)
		const insertAtLength = insertAtByteLength / 4
		const insertAt: number[] = new Array(insertAtLength)
		for (let i = 0; i < insertAtLength; i++) {
			const iItem = reader.readInt32(ptr)
			ptr += 4
			insertAt[i] = iItem
		}

		return {
			bytesRead: ptr,
			result: new ListViewInsertOperation(tag, insertAt),
		}
	}

	public override writeTo(writer: NanoBufWriter, offset: number = 0): number {
		const writerSizeBefore = writer.currentSize

		writer.writeTypeId(2077451345, offset)

		writer.appendInt32(this.tag)
		writer.writeFieldSize(0, 4, offset)

		writer.writeFieldSize(1, this.insertAt.length * 4, offset)
		for (const insertAt of this.insertAt) {
			writer.appendInt32(insertAt)
		}

		return writer.currentSize - writerSizeBefore
	}

	public override bytes(): Uint8Array {
		const writer = new NanoBufWriter(12)
		this.writeTo(writer)
		return writer.bytes
	}
}

export { ListViewInsertOperation }
