// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter } from "nanopack"

import { Widget } from "../widget/widget.np.js"

class Button extends Widget {
	public static TYPE_ID = 320412644

	public override readonly typeId: number = 320412644

	public override readonly headerSize: number = 16

	constructor(
		public tag: number | null,
		public text: string,
		public onClick: number,
	) {
		super(tag)
	}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: Button } | null {
		const reader = new NanoBufReader(bytes)
		return Button.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: Button } | null {
		let ptr = 16

		let tag: number | null
		if (reader.readFieldSize(0) >= 0) {
			tag = reader.readInt32(ptr)
			ptr += 4
		} else {
			tag = null
		}

		const textByteLength = reader.readFieldSize(1)
		const text = reader.readString(ptr, textByteLength)
		ptr += textByteLength

		const onClick = reader.readInt32(ptr)
		ptr += 4

		return { bytesRead: ptr, result: new Button(tag, text, onClick) }
	}

	public override writeTo(writer: NanoBufWriter, offset: number = 0): number {
		const writerSizeBefore = writer.currentSize

		writer.writeTypeId(320412644, offset)

		if (this.tag) {
			writer.appendInt32(this.tag)
			writer.writeFieldSize(0, 4, offset)
		} else {
			writer.writeFieldSize(0, -1, offset)
		}

		const textByteLength = writer.appendString(this.text)
		writer.writeFieldSize(1, textByteLength, offset)

		writer.appendInt32(this.onClick)
		writer.writeFieldSize(2, 4, offset)

		return writer.currentSize - writerSizeBefore
	}

	public override bytes(): Uint8Array {
		const writer = new NanoBufWriter(16)
		this.writeTo(writer)
		return writer.bytes
	}
}

export { Button }
