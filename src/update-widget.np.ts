// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack"

import { Widget } from "./widget/widget.np.js"

class UpdateWidget implements NanoPackMessage {
	public static TYPE_ID = 1016534798

	constructor(
		public tag: number,
		public widget: Widget,
	) {}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: UpdateWidget } | null {
		const reader = new NanoBufReader(bytes)
		return UpdateWidget.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: UpdateWidget } | null {
		let ptr = 12

		const tag = reader.readInt32(ptr)
		ptr += 4

		const maybeWidget = Widget.fromReader(reader.newReaderAt(ptr))
		if (!maybeWidget) {
			return null
		}
		const widget = maybeWidget.result
		ptr += maybeWidget.bytesRead

		return { bytesRead: ptr, result: new UpdateWidget(tag, widget) }
	}

	public get typeId(): number {
		return 1016534798
	}

	public bytes(): Uint8Array {
		const writer = new NanoBufWriter(12)
		writer.writeTypeId(1016534798)

		writer.appendInt32(this.tag)
		writer.writeFieldSize(0, 4)

		const widgetData = this.widget.bytes()
		writer.appendBytes(widgetData)
		writer.writeFieldSize(1, widgetData.byteLength)

		return writer.bytes
	}

	public bytesWithLengthPrefix(): Uint8Array {
		const writer = new NanoBufWriter(12 + 4, true)
		writer.writeTypeId(1016534798)

		writer.appendInt32(this.tag)
		writer.writeFieldSize(0, 4)

		const widgetData = this.widget.bytes()
		writer.appendBytes(widgetData)
		writer.writeFieldSize(1, widgetData.byteLength)

		writer.writeLengthPrefix(writer.currentSize - 4)

		return writer.bytes
	}
}

export { UpdateWidget }
