// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack"

import { Widget } from "./widget/widget.np.js"

class UpdateWidget implements NanoPackMessage {
	public static TYPE_ID = 1016534798

	constructor(
		public tag: number,
		public widget: Widget,
		public args: NanoBufReader | null,
	) {}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: UpdateWidget } | null {
		const reader = new NanoBufReader(bytes)
		return UpdateWidget.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: UpdateWidget } | null {
		let ptr = 16

		const tag = reader.readInt32(ptr)
		ptr += 4

		const maybeWidget = Widget.fromReader(reader.newReaderAt(ptr))
		if (!maybeWidget) {
			return null
		}
		const widget = maybeWidget.result
		ptr += maybeWidget.bytesRead

		let args: NanoBufReader | null
		if (reader.readFieldSize(2) >= 0) {
			const argsByteLength = reader.readFieldSize(2)
			args = reader.newReaderAt(ptr, ptr + argsByteLength)
			ptr += argsByteLength
		} else {
			args = null
		}

		return { bytesRead: ptr, result: new UpdateWidget(tag, widget, args) }
	}

	public get typeId(): number {
		return 1016534798
	}

	public bytes(): Uint8Array {
		const writer = new NanoBufWriter(16)
		writer.writeTypeId(1016534798)

		writer.appendInt32(this.tag)
		writer.writeFieldSize(0, 4)

		const widgetData = this.widget.bytes()
		writer.appendBytes(widgetData)
		writer.writeFieldSize(1, widgetData.byteLength)

		if (this.args) {
			writer.writeFieldSize(2, this.args.bytes.byteLength)
			writer.appendBytes(this.args.bytes)
		} else {
			writer.writeFieldSize(2, -1)
		}

		return writer.bytes
	}

	public bytesWithLengthPrefix(): Uint8Array {
		const writer = new NanoBufWriter(16 + 4, true)
		writer.writeTypeId(1016534798)

		writer.appendInt32(this.tag)
		writer.writeFieldSize(0, 4)

		const widgetData = this.widget.bytes()
		writer.appendBytes(widgetData)
		writer.writeFieldSize(1, widgetData.byteLength)

		if (this.args) {
			writer.writeFieldSize(2, this.args.bytes.byteLength)
			writer.appendBytes(this.args.bytes)
		} else {
			writer.writeFieldSize(2, -1)
		}

		writer.writeLengthPrefix(writer.currentSize - 4)

		return writer.bytes
	}
}

export { UpdateWidget }
